{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to CS12 SI!\n\n\nThis is where all of the labs will be posted.\n\n\nWhat is SI?\n\n\nSupplemental Instruction is a series of weekly review sessions for students taking historically difficult courses.\nIt offers students the chance to collaborate, discuss challenging concepts, and study for exams.\n\n\nWhat isn\u2019t SI?\n\n\nSupplemental Instruction is not a lecture.\nSI Leaders are not there to teach you new material but to lead you in reviewing the material covered in lecture and to help guide you in understanding the subject.\n\n\nWho should go?\n\n\nIf you are in a Learning Community, attendance is mandatory.\n\n\nGuidelines:\n\n\n\n\nBe respectful. This includes silencing your cell phones and not using them during sessions.\n\n\nParticipate! You won\u2019t get very much out of SI if you don\u2019t.\n\n\nNo food or drink besides water. This is a rule placed by the administration. I will enforce it.\n\n\nLate entry and early exit should be quiet.\n\n\nSign in, even if you are late.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-cs12-si", 
            "text": "This is where all of the labs will be posted.", 
            "title": "Welcome to CS12 SI!"
        }, 
        {
            "location": "/#what-is-si", 
            "text": "Supplemental Instruction is a series of weekly review sessions for students taking historically difficult courses.\nIt offers students the chance to collaborate, discuss challenging concepts, and study for exams.", 
            "title": "What is SI?"
        }, 
        {
            "location": "/#what-isnt-si", 
            "text": "Supplemental Instruction is not a lecture.\nSI Leaders are not there to teach you new material but to lead you in reviewing the material covered in lecture and to help guide you in understanding the subject.", 
            "title": "What isn\u2019t SI?"
        }, 
        {
            "location": "/#who-should-go", 
            "text": "If you are in a Learning Community, attendance is mandatory.", 
            "title": "Who should go?"
        }, 
        {
            "location": "/#guidelines", 
            "text": "Be respectful. This includes silencing your cell phones and not using them during sessions.  Participate! You won\u2019t get very much out of SI if you don\u2019t.  No food or drink besides water. This is a rule placed by the administration. I will enforce it.  Late entry and early exit should be quiet.  Sign in, even if you are late.", 
            "title": "Guidelines:"
        }, 
        {
            "location": "/lab02/", 
            "text": "Lab 2: Contact Interface\n\n\nStreams\n\n\nThis week you will be learning about streams.\n\n\n#include \niostream\n\n#include \nfstream\n\n#include \ncstdlib\n\n#include \nsstream\n\n#include \nvector\n\n#include \nctime\n\n\nusing namespace std;\n\nvector\nstring\n fnames;\nvector\nstring\n lnames;\nvector\nstring\n numbers;\nvector\nint\n    timestamps;\n\nvoid _print(int contact) {\n    if (contact \n 0 || contact \n= fnames.size()) return;\n    cout \n fnames.at(contact)  \n '\\t' \n lnames.at(contact)     \n '\\t'\n        \n numbers.at(contact) \n '\\t' \n timestamps.at(contact) \n endl;\n}\n\nvoid _print() {\n    for (unsigned i = 0; i \n fnames.size(); ++i) {\n        _print(i);\n    }\n}\n\n// accepts first name\nint _find(string fname) {\n    int location = -1;\n    for(unsigned i = 0; i \n fnames.size(); ++i) {\n        if (fnames.at(i) == fname) {\n            location = i;\n            break;\n        }\n    }\n    return location;\n}\n\n// uses the input string stream to get contact info\n// then adds it to our contact list\nvoid add(istream\n parse) {\n    string fname, lname, number;\n    parse \n fname \n lname \n number;\n    if (parse.fail()) {\n        cout \n \nERROR: add [firstName] [lastName] [number]\n \n endl;\n    } else {\n        fnames.push_back(fname);\n        lnames.push_back(lname);\n        numbers.push_back(number);\n        timestamps.push_back(time(0));\n    }\n}\n\n// removes contact based on first name\nvoid rem(istream\n parse) {\n    string fname;\n    parse \n fname;\n    if (parse.fail()) {\n        cout \n \nERROR: remove [firstName]\n \n endl;\n    } else {\n        int location = _find(fname);\n        if (location != -1) {\n            fnames.erase(fnames.begin()+location);\n            lnames.erase(lnames.begin()+location);\n            numbers.erase(numbers.begin()+location);\n            timestamps.erase(timestamps.begin()+location);\n        } else {\n            cout \n \ncould not find '\n \n fname \n \n'\n \n endl;\n        }\n    }\n}\n\n// no args: print all contacts\n// 1 arg:   print that specific contact (1-indexed)\nvoid print(istream\n parse) {\n    int contact;\n    parse \n contact;\n    if (!parse.fail()) {\n        _print(contact-1);\n    } else {\n        _print();\n    }\n}\n\nvoid _load(string fileName) {\n    ifstream fin;\n    int count, ts;\n    string fname, lname, num;\n\n    fin.open(fileName.c_str());\n    if (!fin.is_open()) {\n        cout \n \nERROR: opening '\n \n fileName \n \n' failed\n \n endl;\n        return;\n    }\n\n    fin \n count;\n    if (fin.fail()) {\n        cout \n \nERROR: '\n \n fileName \n \n' is not in the right format\n \n endl;\n        return;\n    }\n\n    for(int i = 0; i \n count; ++i) {\n        fin \n fname \n lname \n num \n ts;\n        if (fin.fail()) {\n            cout \n \nSomething went TERRIBLY wrong while loading '\n \n fileName\n                \n \n'\n \n endl;\n            // uncomment for fatal error:\n            //exit(1);\n            return;\n        }\n        fnames.push_back(fname);\n        lnames.push_back(lname);\n        numbers.push_back(num);\n        timestamps.push_back(ts);\n    }\n}\n\n// loads contacts from a file\nvoid load(istream\n parse) {\n    string fileName;\n    parse \n fileName;\n    if (parse.fail()) {\n        cout \n \nERROR: load [fileName]\n \n endl;\n        return;\n    }\n\n    _load(fileName);\n}\n\nvoid _help() {\n    cout \n \nCommands:\n \n endl;\n    cout \n \n\\t(a)dd    [firstName] [lastName] [number]\n \n endl;\n    cout \n \n\\t\\t-Add a contact to our list\n \n endl;\n    cout \n \n\\t(l)oad   [fileName]\n \n endl;\n    cout \n \n\\t\\t-Load contacts from a file\n \n endl;\n    cout \n \n\\t\\t-Does not overwrite contacts; appends to current list\n \n endl;\n    cout \n \n\\t(h)elp\n \n endl;;\n    cout \n \n\\t\\t-Print this menu\n \n endl;\n    cout \n \n\\t(p)rint  [contactNumber]\n \n endl;\n    cout \n \n\\t\\t-Print a specific contact or all contacts\n \n endl;\n    cout \n \n\\t(r)emove [firstName]\n \n endl;\n    cout \n \n\\t\\t-Remove a contact by first name\n \n endl;\n    cout \n \n\\t(q)uit\n \n endl;\n    cout \n \n\\t\\t-End program\n \n endl;\n}\n\nint main() {\n    const string prompt = \n \n;\n\n    cout \n \nHello!\n \n endl;\n    while (cin.good()) {\n        string line, command;\n        istringstream parse;\n\n        cout \n prompt;\n        getline(cin, line);\n        parse.str(line);\n        parse \n command;\n        if (command == \nadd\n || command == \na\n) {\n            add(parse);\n        } else if (command == \nremove\n || command == \nrem\n || command == \nr\n) {\n            rem(parse);\n        } else if (command == \nprint\n || command == \np\n) {\n            print(parse);\n        } else if (command == \nquit\n || command == \nq\n) {\n            break;\n        } else if (command == \nhelp\n || command == \nh\n) {\n            _help();\n        } else if (command == \nload\n || command == \nl\n) {\n            load(parse);\n        } else {\n            if (!parse.fail()) {\n                cout \n \nERROR: invalid command '\n \n command \n '\\'' \n endl;\n                _help();\n            }\n        }\n    }\n    cout \n \nGoodbye!\n \n endl;\n}", 
            "title": "Lab Week 2"
        }, 
        {
            "location": "/lab02/#lab-2-contact-interface", 
            "text": "", 
            "title": "Lab 2: Contact Interface"
        }, 
        {
            "location": "/lab02/#streams", 
            "text": "This week you will be learning about streams.  #include  iostream \n#include  fstream \n#include  cstdlib \n#include  sstream \n#include  vector \n#include  ctime \n\nusing namespace std;\n\nvector string  fnames;\nvector string  lnames;\nvector string  numbers;\nvector int     timestamps;\n\nvoid _print(int contact) {\n    if (contact   0 || contact  = fnames.size()) return;\n    cout   fnames.at(contact)    '\\t'   lnames.at(contact)       '\\t'\n          numbers.at(contact)   '\\t'   timestamps.at(contact)   endl;\n}\n\nvoid _print() {\n    for (unsigned i = 0; i   fnames.size(); ++i) {\n        _print(i);\n    }\n}\n\n// accepts first name\nint _find(string fname) {\n    int location = -1;\n    for(unsigned i = 0; i   fnames.size(); ++i) {\n        if (fnames.at(i) == fname) {\n            location = i;\n            break;\n        }\n    }\n    return location;\n}\n\n// uses the input string stream to get contact info\n// then adds it to our contact list\nvoid add(istream  parse) {\n    string fname, lname, number;\n    parse   fname   lname   number;\n    if (parse.fail()) {\n        cout    ERROR: add [firstName] [lastName] [number]    endl;\n    } else {\n        fnames.push_back(fname);\n        lnames.push_back(lname);\n        numbers.push_back(number);\n        timestamps.push_back(time(0));\n    }\n}\n\n// removes contact based on first name\nvoid rem(istream  parse) {\n    string fname;\n    parse   fname;\n    if (parse.fail()) {\n        cout    ERROR: remove [firstName]    endl;\n    } else {\n        int location = _find(fname);\n        if (location != -1) {\n            fnames.erase(fnames.begin()+location);\n            lnames.erase(lnames.begin()+location);\n            numbers.erase(numbers.begin()+location);\n            timestamps.erase(timestamps.begin()+location);\n        } else {\n            cout    could not find '    fname    '    endl;\n        }\n    }\n}\n\n// no args: print all contacts\n// 1 arg:   print that specific contact (1-indexed)\nvoid print(istream  parse) {\n    int contact;\n    parse   contact;\n    if (!parse.fail()) {\n        _print(contact-1);\n    } else {\n        _print();\n    }\n}\n\nvoid _load(string fileName) {\n    ifstream fin;\n    int count, ts;\n    string fname, lname, num;\n\n    fin.open(fileName.c_str());\n    if (!fin.is_open()) {\n        cout    ERROR: opening '    fileName    ' failed    endl;\n        return;\n    }\n\n    fin   count;\n    if (fin.fail()) {\n        cout    ERROR: '    fileName    ' is not in the right format    endl;\n        return;\n    }\n\n    for(int i = 0; i   count; ++i) {\n        fin   fname   lname   num   ts;\n        if (fin.fail()) {\n            cout    Something went TERRIBLY wrong while loading '    fileName\n                   '    endl;\n            // uncomment for fatal error:\n            //exit(1);\n            return;\n        }\n        fnames.push_back(fname);\n        lnames.push_back(lname);\n        numbers.push_back(num);\n        timestamps.push_back(ts);\n    }\n}\n\n// loads contacts from a file\nvoid load(istream  parse) {\n    string fileName;\n    parse   fileName;\n    if (parse.fail()) {\n        cout    ERROR: load [fileName]    endl;\n        return;\n    }\n\n    _load(fileName);\n}\n\nvoid _help() {\n    cout    Commands:    endl;\n    cout    \\t(a)dd    [firstName] [lastName] [number]    endl;\n    cout    \\t\\t-Add a contact to our list    endl;\n    cout    \\t(l)oad   [fileName]    endl;\n    cout    \\t\\t-Load contacts from a file    endl;\n    cout    \\t\\t-Does not overwrite contacts; appends to current list    endl;\n    cout    \\t(h)elp    endl;;\n    cout    \\t\\t-Print this menu    endl;\n    cout    \\t(p)rint  [contactNumber]    endl;\n    cout    \\t\\t-Print a specific contact or all contacts    endl;\n    cout    \\t(r)emove [firstName]    endl;\n    cout    \\t\\t-Remove a contact by first name    endl;\n    cout    \\t(q)uit    endl;\n    cout    \\t\\t-End program    endl;\n}\n\nint main() {\n    const string prompt =    ;\n\n    cout    Hello!    endl;\n    while (cin.good()) {\n        string line, command;\n        istringstream parse;\n\n        cout   prompt;\n        getline(cin, line);\n        parse.str(line);\n        parse   command;\n        if (command ==  add  || command ==  a ) {\n            add(parse);\n        } else if (command ==  remove  || command ==  rem  || command ==  r ) {\n            rem(parse);\n        } else if (command ==  print  || command ==  p ) {\n            print(parse);\n        } else if (command ==  quit  || command ==  q ) {\n            break;\n        } else if (command ==  help  || command ==  h ) {\n            _help();\n        } else if (command ==  load  || command ==  l ) {\n            load(parse);\n        } else {\n            if (!parse.fail()) {\n                cout    ERROR: invalid command '    command   '\\''   endl;\n                _help();\n            }\n        }\n    }\n    cout    Goodbye!    endl;\n}", 
            "title": "Streams"
        }
    ]
}