{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to CS12 SI!\n\n\nThis is where all of the labs will be posted.\n\n\nWhat is SI?\n\n\nSupplemental Instruction is a series of weekly review sessions for students taking historically difficult courses.\nIt offers students the chance to collaborate, discuss challenging concepts, and study for exams.\n\n\nWhat isn\u2019t SI?\n\n\nSupplemental Instruction is not a lecture.\nSI Leaders are not there to teach you new material but to lead you in reviewing the material covered in lecture and to help guide you in understanding the subject.\n\n\nWho should go?\n\n\nIf you are in a Learning Community, attendance is mandatory.\n\n\nGuidelines:\n\n\n\n\nBe respectful. This includes silencing your cell phones and not using them during sessions.\n\n\nParticipate! You won\u2019t get very much out of SI if you don\u2019t.\n\n\nNo food or drink besides water. This is a rule placed by the administration. I will enforce it.\n\n\nLate entry and early exit should be quiet.\n\n\nSign in, even if you are late.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-cs12-si", 
            "text": "This is where all of the labs will be posted.", 
            "title": "Welcome to CS12 SI!"
        }, 
        {
            "location": "/#what-is-si", 
            "text": "Supplemental Instruction is a series of weekly review sessions for students taking historically difficult courses.\nIt offers students the chance to collaborate, discuss challenging concepts, and study for exams.", 
            "title": "What is SI?"
        }, 
        {
            "location": "/#what-isnt-si", 
            "text": "Supplemental Instruction is not a lecture.\nSI Leaders are not there to teach you new material but to lead you in reviewing the material covered in lecture and to help guide you in understanding the subject.", 
            "title": "What isn\u2019t SI?"
        }, 
        {
            "location": "/#who-should-go", 
            "text": "If you are in a Learning Community, attendance is mandatory.", 
            "title": "Who should go?"
        }, 
        {
            "location": "/#guidelines", 
            "text": "Be respectful. This includes silencing your cell phones and not using them during sessions.  Participate! You won\u2019t get very much out of SI if you don\u2019t.  No food or drink besides water. This is a rule placed by the administration. I will enforce it.  Late entry and early exit should be quiet.  Sign in, even if you are late.", 
            "title": "Guidelines:"
        }, 
        {
            "location": "/lab01/", 
            "text": "Exercise 1\n\n\nUnit test a hidden function.\n\n\nDownload the file located \nhere\n to your cloud9 workspace.\n\n\nwget\n\n\n\n\nWrite some code to test the function code you just downloaded.\n\n\nThe function is hidden from you, so you will need to figure out what is wrong with it using only inputs and outputs (called black-box testing).\nThe function in question has the following signature:\n\n\nvoid replace(string\n, string, string);\n\n\n\n\nThe function accepts a string to modify (first parameter), a term to replace (second parameter), and what to replace each term with (third parameter).\n\n\nThe function may or may not be in working order.\nYour job is to tell me whether the function is correct (passes all your test cases), or incorrect (fails at least one of your test cases).\nFeel free to ask me to clarify the function spec for you at any time.\n\n\nYou will not be able to compile your unit test code without providing a declaration for the replace function inside your test code.\n\n\nThe command you should use to compile your code is the following:\n\n\ng++ reverse.o myTests.cpp\n\n\n\n\nmyTests.cpp\n in this case is your unit test program.\n(you will learn what \ng++\n is doing here in more detail later)\n\n\nExercise 2\n\n\nCount the frequency of positive numbers from \nstdin\n.\n\n\nInput\n:\nThe first number represents the largest value provided.\nIt is followed by an unknown number of integers.\n\n\nReport the frequency of each value.\n\n\nRun this script to generate your own custom data file:\n\n\ndata; for i in `seq 100`; do bc \n$RANDOM % 20\n \n data; done\n\n\n\n\nYou are not required to use c++ file input techniques.\nInstead, use input redirection.\n\n\n# compile:\ng++ main.cpp\n# input redirection:\n./a.out \n data\n\n\n\n\nExercise 3\n\n\nWrite counting sort (see SI Leader for explanation).\n\n\nExercise 4\n\n\nTranspose a square matrix.\nThe matrix can be any size, but is guaranteed to be square (width and height are the same).\n\n\nHere is an example of a 3x3 matrix:\n\n\ninput:\n\n0 1 2\n3 4 5\n6 7 8\n\ntransposed:\n\n0 3 6\n1 4 7\n2 5 8\n\n\n\n\nYou represent matrices in c++ with a vector of vectors, \nvector\nvector\nint\n \n.\n\n\nHere is a function you can paste at the beginning of your program (after \nusing namespace std;\n) that will allow you to print vectors using cout:\n\n\ntemplate \ntypename T\n\nostream\n operator\n(ostream\n o, const vector\nT\n v) {\n    cout \n '{';\n    if (v.size() \n 0) {\n        for (unsigned i = 0; i \n v.size() - 1; ++i) {\n            o \n v.at(i) \n \n, \n;\n        }\n        o \n v.at(v.size() - 1);\n    }\n    o \n '}';\n    return o;\n}\n\n\n\n\nHint\n:\nYou do not need to transpose this matrix in-place.", 
            "title": "Week 1 Lab: CS 10 Review"
        }, 
        {
            "location": "/lab01/#exercise-1", 
            "text": "Unit test a hidden function.  Download the file located  here  to your cloud9 workspace.  wget  Write some code to test the function code you just downloaded.  The function is hidden from you, so you will need to figure out what is wrong with it using only inputs and outputs (called black-box testing).\nThe function in question has the following signature:  void replace(string , string, string);  The function accepts a string to modify (first parameter), a term to replace (second parameter), and what to replace each term with (third parameter).  The function may or may not be in working order.\nYour job is to tell me whether the function is correct (passes all your test cases), or incorrect (fails at least one of your test cases).\nFeel free to ask me to clarify the function spec for you at any time.  You will not be able to compile your unit test code without providing a declaration for the replace function inside your test code.  The command you should use to compile your code is the following:  g++ reverse.o myTests.cpp  myTests.cpp  in this case is your unit test program.\n(you will learn what  g++  is doing here in more detail later)", 
            "title": "Exercise 1"
        }, 
        {
            "location": "/lab01/#exercise-2", 
            "text": "Count the frequency of positive numbers from  stdin .  Input :\nThe first number represents the largest value provided.\nIt is followed by an unknown number of integers.  Report the frequency of each value.  Run this script to generate your own custom data file:  data; for i in `seq 100`; do bc  $RANDOM % 20    data; done  You are not required to use c++ file input techniques.\nInstead, use input redirection.  # compile:\ng++ main.cpp\n# input redirection:\n./a.out   data", 
            "title": "Exercise 2"
        }, 
        {
            "location": "/lab01/#exercise-3", 
            "text": "Write counting sort (see SI Leader for explanation).", 
            "title": "Exercise 3"
        }, 
        {
            "location": "/lab01/#exercise-4", 
            "text": "Transpose a square matrix.\nThe matrix can be any size, but is guaranteed to be square (width and height are the same).  Here is an example of a 3x3 matrix:  input:\n\n0 1 2\n3 4 5\n6 7 8\n\ntransposed:\n\n0 3 6\n1 4 7\n2 5 8  You represent matrices in c++ with a vector of vectors,  vector vector int   .  Here is a function you can paste at the beginning of your program (after  using namespace std; ) that will allow you to print vectors using cout:  template  typename T \nostream  operator (ostream  o, const vector T  v) {\n    cout   '{';\n    if (v.size()   0) {\n        for (unsigned i = 0; i   v.size() - 1; ++i) {\n            o   v.at(i)    ,  ;\n        }\n        o   v.at(v.size() - 1);\n    }\n    o   '}';\n    return o;\n}  Hint :\nYou do not need to transpose this matrix in-place.", 
            "title": "Exercise 4"
        }, 
        {
            "location": "/dis01_2/", 
            "text": "Introduction\n\n\nSelection sort is a naive sorting algorithm.\n\n\nGiven an unsorted vector of integers, find the position of the smallest element.\n\nSwap that element to index 0 of the vector.\n\nThen, find the smallest element in the index range \n[1, v.size()-1]\n.\n\nSwap that element to index 1 of the vector.\n\nThen, find the smallest element in the index range \n[2, v.size()-1]\n.\n\nSwap that element to index 2 of the vector.\n\nRepeat finding the smallest element and swapping into place until there are no more elements to sort.\n\n\nThis process guarantees a sorted vector at the end.\nIn the case described above, the vector will be in ascending order.\n\n\nStarter Code\n\n\nTake a look at the starter code below.\n\n\nWe will complete either \nfillVec\n or \nprintVec\n together.\n\n\n#include \niostream\n\n#include \nvector\n\n#include \ncstdlib\n\n#include \nctime\n\n\n// This is a program that will run an INSERTION SORT on a vector\n\nusing namespace std;\n\nint min(const vector\nint\n v, int);\nvoid selectionSort(vector\nint\n v);\nvoid fillVec(vector\nint\n v);\nvoid printVec(const vector\nint\n v);\n\nint main() {\n    srand(time(0));\n\n    vector\nint\n test(10);\n\n    fillVec(test);\n    printVec(test);\n    selectionSort(test);\n    printVec(test);\n\n    return 0;\n}\n\n/* This function gets the position of the smallest element in the vector\n *\n * Accepts:\n *     const vector\nint\n v - the vector to search\n *     int start            - the position to start looking for the smallest value\n * Returns:\n *     int - the position of the smallest element (-1 if there is no value)\n */\nint min(const vector\nint\n v, int start) {\n    return -1;\n}\n\n/* Performs selection sort on the vector\n *\n * Accepts:\n *     vector\nint\n v - the vector to sort\n * Returns:\n *     void\n */\nvoid selectionSort(vector\nint\n v) {\n}\n\n/* Fills a vector with random values in [0, v.size()]\n * Accepts:\n *     vector\nint\n v - the vector to fill with random data\n * Returns:\n *     void\n */\nvoid fillVec(vector\nint\n v) {\n}\n\n/* Prints a vector to stdout\n *\n * Accepts:\n *     vector\nint\n v - the vector to print\n * Returns:\n *     void\n */\nvoid printVec(const vector\nint\n v) {\n}", 
            "title": "Week 1 Dis 2: Selection Sort Case Study"
        }, 
        {
            "location": "/dis01_2/#introduction", 
            "text": "Selection sort is a naive sorting algorithm.  Given an unsorted vector of integers, find the position of the smallest element. \nSwap that element to index 0 of the vector. \nThen, find the smallest element in the index range  [1, v.size()-1] . \nSwap that element to index 1 of the vector. \nThen, find the smallest element in the index range  [2, v.size()-1] . \nSwap that element to index 2 of the vector. \nRepeat finding the smallest element and swapping into place until there are no more elements to sort.  This process guarantees a sorted vector at the end.\nIn the case described above, the vector will be in ascending order.", 
            "title": "Introduction"
        }, 
        {
            "location": "/dis01_2/#starter-code", 
            "text": "Take a look at the starter code below.  We will complete either  fillVec  or  printVec  together.  #include  iostream \n#include  vector \n#include  cstdlib \n#include  ctime \n\n// This is a program that will run an INSERTION SORT on a vector\n\nusing namespace std;\n\nint min(const vector int  v, int);\nvoid selectionSort(vector int  v);\nvoid fillVec(vector int  v);\nvoid printVec(const vector int  v);\n\nint main() {\n    srand(time(0));\n\n    vector int  test(10);\n\n    fillVec(test);\n    printVec(test);\n    selectionSort(test);\n    printVec(test);\n\n    return 0;\n}\n\n/* This function gets the position of the smallest element in the vector\n *\n * Accepts:\n *     const vector int  v - the vector to search\n *     int start            - the position to start looking for the smallest value\n * Returns:\n *     int - the position of the smallest element (-1 if there is no value)\n */\nint min(const vector int  v, int start) {\n    return -1;\n}\n\n/* Performs selection sort on the vector\n *\n * Accepts:\n *     vector int  v - the vector to sort\n * Returns:\n *     void\n */\nvoid selectionSort(vector int  v) {\n}\n\n/* Fills a vector with random values in [0, v.size()]\n * Accepts:\n *     vector int  v - the vector to fill with random data\n * Returns:\n *     void\n */\nvoid fillVec(vector int  v) {\n}\n\n/* Prints a vector to stdout\n *\n * Accepts:\n *     vector int  v - the vector to print\n * Returns:\n *     void\n */\nvoid printVec(const vector int  v) {\n}", 
            "title": "Starter Code"
        }, 
        {
            "location": "/lab02/", 
            "text": "Exercise 1\n\n\nWrite a program that lists all of its arguments.\n\n\nExample:\n\n\n$ ./a.out hi there 2 3 4 20\nhi there 2 3 4 20\n$\n\n\n\n\nExercise 2\n\n\nWrite a program that takes each integer in a file and puts it on a separate line.\nYou should ask for the name of the input and output files from the user.\n\n\nDo \nnot\n allow the input and output filenames to be the same!\n\n\nBonus 1\n:\nIf the file contains non-integer terms, do not put them in the resulting file.\n\n\nBonus 2\n:\nAllow the user to pass in filenames via command line arguments.\nThe first argument should be the input file name.\nThe second should be the output file name.\n\n\nIf only one argument is passed in, assume it is the input file name and ask for the output file name.\n\n\nIf no arguments are passed in, ask for both the input and output file names.\n\n\n\n\n\nExercise 3\n\n\nWrite a program that prints the sum of all the numbers in a file.\nThe file will only contain integers.\nThe file name will be provided by the user at runtime.\n\n\nPrint the sum of the integers on each line, followed by the sum of all the integers.\n\n\nBonus\n:\nIf the file contains non-integer terms, ignore them.", 
            "title": "Lab Week 2: Streams"
        }, 
        {
            "location": "/lab02/#exercise-1", 
            "text": "Write a program that lists all of its arguments.  Example:  $ ./a.out hi there 2 3 4 20\nhi there 2 3 4 20\n$", 
            "title": "Exercise 1"
        }, 
        {
            "location": "/lab02/#exercise-2", 
            "text": "Write a program that takes each integer in a file and puts it on a separate line.\nYou should ask for the name of the input and output files from the user.  Do  not  allow the input and output filenames to be the same!  Bonus 1 :\nIf the file contains non-integer terms, do not put them in the resulting file.  Bonus 2 :\nAllow the user to pass in filenames via command line arguments.\nThe first argument should be the input file name.\nThe second should be the output file name.  If only one argument is passed in, assume it is the input file name and ask for the output file name.  If no arguments are passed in, ask for both the input and output file names.", 
            "title": "Exercise 2"
        }, 
        {
            "location": "/lab02/#exercise-3", 
            "text": "Write a program that prints the sum of all the numbers in a file.\nThe file will only contain integers.\nThe file name will be provided by the user at runtime.  Print the sum of the integers on each line, followed by the sum of all the integers.  Bonus :\nIf the file contains non-integer terms, ignore them.", 
            "title": "Exercise 3"
        }, 
        {
            "location": "/dis02_2/", 
            "text": "Merge\n\n\nSometimes, we want to join two sorted collections of numbers.\n\n\n[Algorithm on board]\n\n\nWrite a function that performs this operation.", 
            "title": "Week 2 Dis 2: Merge Case Study"
        }, 
        {
            "location": "/dis02_2/#merge", 
            "text": "Sometimes, we want to join two sorted collections of numbers.  [Algorithm on board]  Write a function that performs this operation.", 
            "title": "Merge"
        }, 
        {
            "location": "/dis03_1/", 
            "text": "Introduction\n\n\nThis week you learned about structs and classes.\n\n\nWe will focus on classes because structs are basically the same thing (in \nc++\n).\n\n\nFor this discussion and for lab tomorrow, we will explore how classes work by making our own.\n\n\nClasses (and the objects that are made from them) are often used to model real-world situations.\nThe particular case we will be exploring is that of a small fruit stand at a market.\n\n\nTo keep track of inventory, we model each item as a particular fruit.\nFruits have a name, a weight, and a price.\nThe class we will be making will store the name, weight in pounds, price in dollars, and price per pound.\nAn example of this class's private data members is given below:\n\n\nclass Fruit {\n    private:\n        string name;\n        double weight;\n        double price;\n        double pricePerPound;\n};\n\n\n\n\nExercise 1\n\n\nWhat constructors should we make for this class?\nDiscuss within your group(s) for a few minutes, and share with other groups afterward.\n\n\nImplement these constructors after discussion.\n\n\n[The rest of the exercises will be completed during lab]", 
            "title": "Week 3 Dis 1: Classes"
        }, 
        {
            "location": "/dis03_1/#introduction", 
            "text": "This week you learned about structs and classes.  We will focus on classes because structs are basically the same thing (in  c++ ).  For this discussion and for lab tomorrow, we will explore how classes work by making our own.  Classes (and the objects that are made from them) are often used to model real-world situations.\nThe particular case we will be exploring is that of a small fruit stand at a market.  To keep track of inventory, we model each item as a particular fruit.\nFruits have a name, a weight, and a price.\nThe class we will be making will store the name, weight in pounds, price in dollars, and price per pound.\nAn example of this class's private data members is given below:  class Fruit {\n    private:\n        string name;\n        double weight;\n        double price;\n        double pricePerPound;\n};", 
            "title": "Introduction"
        }, 
        {
            "location": "/dis03_1/#exercise-1", 
            "text": "What constructors should we make for this class?\nDiscuss within your group(s) for a few minutes, and share with other groups afterward.  Implement these constructors after discussion.  [The rest of the exercises will be completed during lab]", 
            "title": "Exercise 1"
        }, 
        {
            "location": "/lab03/", 
            "text": "Introduction\n\n\nWe will be continuing work on the \nFruit\n class from yesterday's discussion.\nCheck out the problem description from yesterday in case you missed it (through the menu on the left).\n\n\nPrint Function\n\n\nWrite a print fucntion for the \nFruit\n class.\n\n\nAccessor Functions\n\n\nDiscuss with your group which accessors should exist for the \nFruit\n class.\nShare your results with other groups.\n\n\nMutator Functions\n\n\nDiscuss with your group which mutators should exist for the \nFruit\n class.\nShare your results with other groups.", 
            "title": "Lab Week 3: Classes"
        }, 
        {
            "location": "/lab03/#introduction", 
            "text": "We will be continuing work on the  Fruit  class from yesterday's discussion.\nCheck out the problem description from yesterday in case you missed it (through the menu on the left).", 
            "title": "Introduction"
        }, 
        {
            "location": "/lab03/#print-function", 
            "text": "Write a print fucntion for the  Fruit  class.", 
            "title": "Print Function"
        }, 
        {
            "location": "/lab03/#accessor-functions", 
            "text": "Discuss with your group which accessors should exist for the  Fruit  class.\nShare your results with other groups.", 
            "title": "Accessor Functions"
        }, 
        {
            "location": "/lab03/#mutator-functions", 
            "text": "Discuss with your group which mutators should exist for the  Fruit  class.\nShare your results with other groups.", 
            "title": "Mutator Functions"
        }, 
        {
            "location": "/dis03_2/", 
            "text": "Binary Search\n\n\nBinary Search is an algorithm used to quickly determine the position of a particular value in a sorted collection of values.\n\n\nTake a \nvector\nint\n v\n as an example.\nFirst, we must assume that all of v's elements are in sorted order.\nIf we want to find the value \n15\n, we start in the middle.\nIf the value there is greater than \n15\n, we know that what we're looking for must be to the left!\n\n\nSo we repeat the process for the left half;\nLook at the middle value in the remaining range.\nIf the value there is less than \n15\n we know that the value must be to the right!\n\n\nOf course, if we find \n15\n at any point, we're done.\nIf we run out of elements to check, \n15\n doesn't exist in \nv\n.\n\n\nRuntime Analysis\n\n\nBy inspection, we see that each time we look for a value, we get rid of half of the remaining elements to search through.\nThe mathematical equivalent to this is: given size \nn\n, how many times does \n2\n divide \nn\n.\nThis can be answered with the \nlog\n function.\n\n\nIn the \nbest\n case, we will find the value we're looking for immediately.\n\n\nIn the \nworst\n case, it will take us \nlog(n)\n tries, where \nn\n is the number of elements.", 
            "title": "Week 3 Dis 2: Binary Search Case Study"
        }, 
        {
            "location": "/dis03_2/#binary-search", 
            "text": "Binary Search is an algorithm used to quickly determine the position of a particular value in a sorted collection of values.  Take a  vector int  v  as an example.\nFirst, we must assume that all of v's elements are in sorted order.\nIf we want to find the value  15 , we start in the middle.\nIf the value there is greater than  15 , we know that what we're looking for must be to the left!  So we repeat the process for the left half;\nLook at the middle value in the remaining range.\nIf the value there is less than  15  we know that the value must be to the right!  Of course, if we find  15  at any point, we're done.\nIf we run out of elements to check,  15  doesn't exist in  v .", 
            "title": "Binary Search"
        }, 
        {
            "location": "/dis03_2/#runtime-analysis", 
            "text": "By inspection, we see that each time we look for a value, we get rid of half of the remaining elements to search through.\nThe mathematical equivalent to this is: given size  n , how many times does  2  divide  n .\nThis can be answered with the  log  function.  In the  best  case, we will find the value we're looking for immediately.  In the  worst  case, it will take us  log(n)  tries, where  n  is the number of elements.", 
            "title": "Runtime Analysis"
        }, 
        {
            "location": "/dis05_1/", 
            "text": "Midterm Review\n\n\nToday, we will be reviewing everything for the midterm.\n\n\nWe will start with requests.\n\n\nIf we finish requests, we will cover the following topics:\n\n\n\n\nFile Streams\n\n\nString Streams\n\n\nStream Error Checking\n\n\nInput Stream Function Usage\n\n\nStructs vs Classes\n\n\npublic\n vs \nprivate\n\n\nClass Data Members\n\n\nClass Function Members\n\n\nConstructors\n\n\nAccessors vs Mutators\n\n\nImplicit Parameter Usage\n\n\nClasses as Data Members\n\n\nOperator Overloading\n\n\nSeparate Files and Modular Compilation\n\n\n#define\n Preprocessor Directive\n\n\n#include\n Preprocessor Directive\n\n\nMakefiles", 
            "title": "Week 5 Dis 1: Midterm Reiew"
        }, 
        {
            "location": "/dis05_1/#midterm-review", 
            "text": "Today, we will be reviewing everything for the midterm.  We will start with requests.  If we finish requests, we will cover the following topics:   File Streams  String Streams  Stream Error Checking  Input Stream Function Usage  Structs vs Classes  public  vs  private  Class Data Members  Class Function Members  Constructors  Accessors vs Mutators  Implicit Parameter Usage  Classes as Data Members  Operator Overloading  Separate Files and Modular Compilation  #define  Preprocessor Directive  #include  Preprocessor Directive  Makefiles", 
            "title": "Midterm Review"
        }
    ]
}