{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to CS12 SI!\n\n\nThis is where all of the labs will be posted.\n\n\nWhat is SI?\n\n\nSupplemental Instruction is a series of weekly review sessions for students taking historically difficult courses.\nIt offers students the chance to collaborate, discuss challenging concepts, and study for exams.\n\n\nWhat isn\u2019t SI?\n\n\nSupplemental Instruction is not a lecture.\nSI Leaders are not there to teach you new material but to lead you in reviewing the material covered in lecture and to help guide you in understanding the subject.\n\n\nWho should go?\n\n\nIf you are in a Learning Community, attendance is mandatory.\n\n\nGuidelines:\n\n\n\n\nBe respectful. This includes silencing your cell phones and not using them during sessions.\n\n\nParticipate! You won\u2019t get very much out of SI if you don\u2019t.\n\n\nNo food or drink besides water. This is a rule placed by the administration. I will enforce it.\n\n\nLate entry and early exit should be quiet.\n\n\nSign in, even if you are late.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-cs12-si", 
            "text": "This is where all of the labs will be posted.", 
            "title": "Welcome to CS12 SI!"
        }, 
        {
            "location": "/#what-is-si", 
            "text": "Supplemental Instruction is a series of weekly review sessions for students taking historically difficult courses.\nIt offers students the chance to collaborate, discuss challenging concepts, and study for exams.", 
            "title": "What is SI?"
        }, 
        {
            "location": "/#what-isnt-si", 
            "text": "Supplemental Instruction is not a lecture.\nSI Leaders are not there to teach you new material but to lead you in reviewing the material covered in lecture and to help guide you in understanding the subject.", 
            "title": "What isn\u2019t SI?"
        }, 
        {
            "location": "/#who-should-go", 
            "text": "If you are in a Learning Community, attendance is mandatory.", 
            "title": "Who should go?"
        }, 
        {
            "location": "/#guidelines", 
            "text": "Be respectful. This includes silencing your cell phones and not using them during sessions.  Participate! You won\u2019t get very much out of SI if you don\u2019t.  No food or drink besides water. This is a rule placed by the administration. I will enforce it.  Late entry and early exit should be quiet.  Sign in, even if you are late.", 
            "title": "Guidelines:"
        }, 
        {
            "location": "/lab01/", 
            "text": "Exercise 1\n\n\nUnit test a hidden function.\n\n\nDownload the file located \nhere\n to your cloud9 workspace.\n\n\nwget\n\n\n\n\nWrite some code to test the function code you just downloaded.\n\n\nThe function is hidden from you, so you will need to figure out what is wrong with it using only inputs and outputs (called black-box testing).\nThe function in question has the following signature:\n\n\nvoid replace(string\n, string, string);\n\n\n\n\nThe function accepts a string to modify (first parameter), a term to replace (second parameter), and what to replace each term with (third parameter).\n\n\nThe function may or may not be in working order.\nYour job is to tell me whether the function is correct (passes all your test cases), or incorrect (fails at least one of your test cases).\nFeel free to ask me to clarify the function spec for you at any time.\n\n\nYou will not be able to compile your unit test code without providing a declaration for the replace function inside your test code.\n\n\nThe command you should use to compile your code is the following:\n\n\ng++ reverse.o myTests.cpp\n\n\n\n\nmyTests.cpp\n in this case is your unit test program.\n(you will learn what \ng++\n is doing here in more detail later)\n\n\nExercise 2\n\n\nCount the frequency of positive numbers from \nstdin\n.\n\n\nInput\n:\nThe first number represents the largest value provided.\nIt is followed by an unknown number of integers.\n\n\nReport the frequency of each value.\n\n\nRun this script to generate your own custom data file:\n\n\ndata; for i in `seq 100`; do bc \n$RANDOM % 20\n \n data; done\n\n\n\n\nYou are not required to use c++ file input techniques.\nInstead, use input redirection.\n\n\n# compile:\ng++ main.cpp\n# input redirection:\n./a.out \n data\n\n\n\n\nExercise 3\n\n\nWrite counting sort (see SI Leader for explanation).\n\n\nExercise 4\n\n\nTranspose a square matrix.\nThe matrix can be any size, but is guaranteed to be square (width and height are the same).\n\n\nHere is an example of a 3x3 matrix:\n\n\ninput:\n\n0 1 2\n3 4 5\n6 7 8\n\ntransposed:\n\n0 3 6\n1 4 7\n2 5 8\n\n\n\n\nYou represent matrices in c++ with a vector of vectors, \nvector\nvector\nint\n \n.\n\n\nHere is a function you can paste at the beginning of your program (after \nusing namespace std;\n) that will allow you to print vectors using cout:\n\n\ntemplate \ntypename T\n\nostream\n operator\n(ostream\n o, const vector\nT\n v) {\n    cout \n '{';\n    if (v.size() \n 0) {\n        for (unsigned i = 0; i \n v.size() - 1; ++i) {\n            o \n v.at(i) \n \n, \n;\n        }\n        o \n v.at(v.size() - 1);\n    }\n    o \n '}';\n    return o;\n}\n\n\n\n\nHint\n:\nYou do not need to transpose this matrix in-place.", 
            "title": "Week 1 Lab: CS 10 Review"
        }, 
        {
            "location": "/lab01/#exercise-1", 
            "text": "Unit test a hidden function.  Download the file located  here  to your cloud9 workspace.  wget  Write some code to test the function code you just downloaded.  The function is hidden from you, so you will need to figure out what is wrong with it using only inputs and outputs (called black-box testing).\nThe function in question has the following signature:  void replace(string , string, string);  The function accepts a string to modify (first parameter), a term to replace (second parameter), and what to replace each term with (third parameter).  The function may or may not be in working order.\nYour job is to tell me whether the function is correct (passes all your test cases), or incorrect (fails at least one of your test cases).\nFeel free to ask me to clarify the function spec for you at any time.  You will not be able to compile your unit test code without providing a declaration for the replace function inside your test code.  The command you should use to compile your code is the following:  g++ reverse.o myTests.cpp  myTests.cpp  in this case is your unit test program.\n(you will learn what  g++  is doing here in more detail later)", 
            "title": "Exercise 1"
        }, 
        {
            "location": "/lab01/#exercise-2", 
            "text": "Count the frequency of positive numbers from  stdin .  Input :\nThe first number represents the largest value provided.\nIt is followed by an unknown number of integers.  Report the frequency of each value.  Run this script to generate your own custom data file:  data; for i in `seq 100`; do bc  $RANDOM % 20    data; done  You are not required to use c++ file input techniques.\nInstead, use input redirection.  # compile:\ng++ main.cpp\n# input redirection:\n./a.out   data", 
            "title": "Exercise 2"
        }, 
        {
            "location": "/lab01/#exercise-3", 
            "text": "Write counting sort (see SI Leader for explanation).", 
            "title": "Exercise 3"
        }, 
        {
            "location": "/lab01/#exercise-4", 
            "text": "Transpose a square matrix.\nThe matrix can be any size, but is guaranteed to be square (width and height are the same).  Here is an example of a 3x3 matrix:  input:\n\n0 1 2\n3 4 5\n6 7 8\n\ntransposed:\n\n0 3 6\n1 4 7\n2 5 8  You represent matrices in c++ with a vector of vectors,  vector vector int   .  Here is a function you can paste at the beginning of your program (after  using namespace std; ) that will allow you to print vectors using cout:  template  typename T \nostream  operator (ostream  o, const vector T  v) {\n    cout   '{';\n    if (v.size()   0) {\n        for (unsigned i = 0; i   v.size() - 1; ++i) {\n            o   v.at(i)    ,  ;\n        }\n        o   v.at(v.size() - 1);\n    }\n    o   '}';\n    return o;\n}  Hint :\nYou do not need to transpose this matrix in-place.", 
            "title": "Exercise 4"
        }, 
        {
            "location": "/dis01_2/", 
            "text": "Introduction\n\n\nSelection sort is a naive sorting algorithm.\n\n\nGiven an unsorted vector of integers, find the position of the smallest element.\n\nSwap that element to index 0 of the vector.\n\nThen, find the smallest element in the index range \n[1, v.size()-1]\n.\n\nSwap that element to index 1 of the vector.\n\nThen, find the smallest element in the index range \n[2, v.size()-1]\n.\n\nSwap that element to index 2 of the vector.\n\nRepeat finding the smallest element and swapping into place until there are no more elements to sort.\n\n\nThis process guarantees a sorted vector at the end.\nIn the case described above, the vector will be in ascending order.\n\n\nStarter Code\n\n\nTake a look at the starter code below.\n\n\nWe will complete either \nfillVec\n or \nprintVec\n together.\n\n\n#include \niostream\n\n#include \nvector\n\n#include \ncstdlib\n\n#include \nctime\n\n\n// This is a program that will run an INSERTION SORT on a vector\n\nusing namespace std;\n\nint min(const vector\nint\n v, int);\nvoid selectionSort(vector\nint\n v);\nvoid fillVec(vector\nint\n v);\nvoid printVec(const vector\nint\n v);\n\nint main() {\n    srand(time(0));\n\n    vector\nint\n test(10);\n\n    fillVec(test);\n    printVec(test);\n    selectionSort(test);\n    printVec(test);\n\n    return 0;\n}\n\n/* This function gets the position of the smallest element in the vector\n *\n * Accepts:\n *     const vector\nint\n v - the vector to search\n *     int start            - the position to start looking for the smallest value\n * Returns:\n *     int - the position of the smallest element (-1 if there is no value)\n */\nint min(const vector\nint\n v, int start) {\n    return -1;\n}\n\n/* Performs selection sort on the vector\n *\n * Accepts:\n *     vector\nint\n v - the vector to sort\n * Returns:\n *     void\n */\nvoid selectionSort(vector\nint\n v) {\n}\n\n/* Fills a vector with random values in [0, v.size()]\n * Accepts:\n *     vector\nint\n v - the vector to fill with random data\n * Returns:\n *     void\n */\nvoid fillVec(vector\nint\n v) {\n}\n\n/* Prints a vector to stdout\n *\n * Accepts:\n *     vector\nint\n v - the vector to print\n * Returns:\n *     void\n */\nvoid printVec(const vector\nint\n v) {\n}", 
            "title": "Week 1 Dis 2 : Selection Sort Case Study"
        }, 
        {
            "location": "/dis01_2/#introduction", 
            "text": "Selection sort is a naive sorting algorithm.  Given an unsorted vector of integers, find the position of the smallest element. \nSwap that element to index 0 of the vector. \nThen, find the smallest element in the index range  [1, v.size()-1] . \nSwap that element to index 1 of the vector. \nThen, find the smallest element in the index range  [2, v.size()-1] . \nSwap that element to index 2 of the vector. \nRepeat finding the smallest element and swapping into place until there are no more elements to sort.  This process guarantees a sorted vector at the end.\nIn the case described above, the vector will be in ascending order.", 
            "title": "Introduction"
        }, 
        {
            "location": "/dis01_2/#starter-code", 
            "text": "Take a look at the starter code below.  We will complete either  fillVec  or  printVec  together.  #include  iostream \n#include  vector \n#include  cstdlib \n#include  ctime \n\n// This is a program that will run an INSERTION SORT on a vector\n\nusing namespace std;\n\nint min(const vector int  v, int);\nvoid selectionSort(vector int  v);\nvoid fillVec(vector int  v);\nvoid printVec(const vector int  v);\n\nint main() {\n    srand(time(0));\n\n    vector int  test(10);\n\n    fillVec(test);\n    printVec(test);\n    selectionSort(test);\n    printVec(test);\n\n    return 0;\n}\n\n/* This function gets the position of the smallest element in the vector\n *\n * Accepts:\n *     const vector int  v - the vector to search\n *     int start            - the position to start looking for the smallest value\n * Returns:\n *     int - the position of the smallest element (-1 if there is no value)\n */\nint min(const vector int  v, int start) {\n    return -1;\n}\n\n/* Performs selection sort on the vector\n *\n * Accepts:\n *     vector int  v - the vector to sort\n * Returns:\n *     void\n */\nvoid selectionSort(vector int  v) {\n}\n\n/* Fills a vector with random values in [0, v.size()]\n * Accepts:\n *     vector int  v - the vector to fill with random data\n * Returns:\n *     void\n */\nvoid fillVec(vector int  v) {\n}\n\n/* Prints a vector to stdout\n *\n * Accepts:\n *     vector int  v - the vector to print\n * Returns:\n *     void\n */\nvoid printVec(const vector int  v) {\n}", 
            "title": "Starter Code"
        }, 
        {
            "location": "/lab02/", 
            "text": "Exercise 1\n\n\nWrite a program that lists all of its arguments.\n\n\nExample:\n\n\n$ ./a.out hi there 2 3 4 20\nhi there 2 3 4 20\n$\n\n\n\n\nExercise 2\n\n\nWrite a program that prints the sum of all the numbers in a file.\nThe file will only contain integers.\nThe file name will be provided by the user at runtime.\n\n\nBonus 1\n:\nIf the file contains non-integer terms, ignore them.\n\n\nBonus 2\n:\nPrint the sum of the integers on each line, followed by the sum of all the integers.\n\n\nExercise 3\n\n\nWrite a program that \"normalizes\" all of the integers in a file.\n\n\nBy normalize, I mean that it takes each integer and puts it on a separate line.\nYou may ignore non-integer file terms at your option.", 
            "title": "Lab Week 2: Streams"
        }, 
        {
            "location": "/lab02/#exercise-1", 
            "text": "Write a program that lists all of its arguments.  Example:  $ ./a.out hi there 2 3 4 20\nhi there 2 3 4 20\n$", 
            "title": "Exercise 1"
        }, 
        {
            "location": "/lab02/#exercise-2", 
            "text": "Write a program that prints the sum of all the numbers in a file.\nThe file will only contain integers.\nThe file name will be provided by the user at runtime.  Bonus 1 :\nIf the file contains non-integer terms, ignore them.  Bonus 2 :\nPrint the sum of the integers on each line, followed by the sum of all the integers.", 
            "title": "Exercise 2"
        }, 
        {
            "location": "/lab02/#exercise-3", 
            "text": "Write a program that \"normalizes\" all of the integers in a file.  By normalize, I mean that it takes each integer and puts it on a separate line.\nYou may ignore non-integer file terms at your option.", 
            "title": "Exercise 3"
        }
    ]
}