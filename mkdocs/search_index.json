{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to CS12 SI!\n\n\nThis is where all of the labs will be posted.\n\n\nWhat is SI?\n\n\nSupplemental Instruction is a series of weekly review sessions for students taking historically difficult courses.\nIt offers students the chance to collaborate, discuss challenging concepts, and study for exams.\n\n\nWhat isn\u2019t SI?\n\n\nSupplemental Instruction is not a lecture.\nSI Leaders are not there to teach you new material but to lead you in reviewing the material covered in lecture and to help guide you in understanding the subject.\n\n\nWho should go?\n\n\nIf you are in a Learning Community, attendance is mandatory.\n\n\nGuidelines:\n\n\n\n\nBe respectful. This includes silencing your cell phones and not using them during sessions.\n\n\nParticipate! You won\u2019t get very much out of SI if you don\u2019t.\n\n\nNo food or drink besides water. This is a rule placed by the administration. I will enforce it.\n\n\nLate entry and early exit should be quiet.\n\n\nSign in, even if you are late.",
            "title": "Home"
        },
        {
            "location": "/#welcome-to-cs12-si",
            "text": "This is where all of the labs will be posted.",
            "title": "Welcome to CS12 SI!"
        },
        {
            "location": "/#what-is-si",
            "text": "Supplemental Instruction is a series of weekly review sessions for students taking historically difficult courses.\nIt offers students the chance to collaborate, discuss challenging concepts, and study for exams.",
            "title": "What is SI?"
        },
        {
            "location": "/#what-isnt-si",
            "text": "Supplemental Instruction is not a lecture.\nSI Leaders are not there to teach you new material but to lead you in reviewing the material covered in lecture and to help guide you in understanding the subject.",
            "title": "What isn\u2019t SI?"
        },
        {
            "location": "/#who-should-go",
            "text": "If you are in a Learning Community, attendance is mandatory.",
            "title": "Who should go?"
        },
        {
            "location": "/#guidelines",
            "text": "Be respectful. This includes silencing your cell phones and not using them during sessions.  Participate! You won\u2019t get very much out of SI if you don\u2019t.  No food or drink besides water. This is a rule placed by the administration. I will enforce it.  Late entry and early exit should be quiet.  Sign in, even if you are late.",
            "title": "Guidelines:"
        },
        {
            "location": "/dis01/",
            "text": "CS 10 Review\n\n\n1) Draw a conceptual model of a variable. Label the address, name, and contents of your variable at a minimum.\n\n\n2) Use your model from part 1 to draw a conceptual model of a vector.\n\n\n3) Descrive the difference between passing a variable by value and passing a variable by reference.\n\n\n4) List some types that should almost always be passed by reference. Why is this the case?\n\n\n5) Write a function that swaps the contents of two variables of type char.\n\n\n6) Write a function that reverses all the strings in a vector of strings.\n\n\n7) Write a function that takes as input a vector of strings and does the following: \n\n   Output 'True' to the terminal if more than half the strings in the vector have a length greater than 6.\n\n   Output 'False' to the terminal otherwise.\n\n\nBrain Teasers\n\n\nSince its right after winter break and your brains are dead and frankly so is your SI Leaders,\nheres some fun brain teasers to wake you up and get your brain gears working!\n\n\n1) What belongs to you, but others use it more?\n\n\n2) What dissapears the moment you say its name?\n\n\n3)",
            "title": "Discussion 1: CS 10 Review"
        },
        {
            "location": "/dis01/#cs-10-review",
            "text": "1) Draw a conceptual model of a variable. Label the address, name, and contents of your variable at a minimum.  2) Use your model from part 1 to draw a conceptual model of a vector.  3) Descrive the difference between passing a variable by value and passing a variable by reference.  4) List some types that should almost always be passed by reference. Why is this the case?  5) Write a function that swaps the contents of two variables of type char.  6) Write a function that reverses all the strings in a vector of strings.  7) Write a function that takes as input a vector of strings and does the following:  \n   Output 'True' to the terminal if more than half the strings in the vector have a length greater than 6. \n   Output 'False' to the terminal otherwise.",
            "title": "CS 10 Review"
        },
        {
            "location": "/dis01/#brain-teasers",
            "text": "Since its right after winter break and your brains are dead and frankly so is your SI Leaders,\nheres some fun brain teasers to wake you up and get your brain gears working!  1) What belongs to you, but others use it more?  2) What dissapears the moment you say its name?  3)",
            "title": "Brain Teasers"
        },
        {
            "location": "/lab01/",
            "text": "Introduction\n\n\nSelection sort is a naive sorting algorithm.\n\n\nGiven an unsorted vector of integers, find the position of the smallest element.\n\nSwap that element to index 0 of the vector.\n\nThen, find the smallest element in the index range \n[1, v.size()-1]\n.\n\nSwap that element to index 1 of the vector.\n\nThen, find the smallest element in the index range \n[2, v.size()-1]\n.\n\nSwap that element to index 2 of the vector.\n\nRepeat finding the smallest element and swapping into place until there are no more elements to sort.\n\n\nThis process guarantees a sorted vector at the end.\nIn the case described above, the vector will be in ascending order.\n\n\nStarter Code\n\n\nTake a look at the starter code below.\n\n\nWe will complete either \nfillVec\n or \nprintVec\n together.\n\n\n#include <iostream>\n#include <vector>\n#include <cstdlib>\n#include <ctime>\n\n// This is a program that will run a SELECTION SORT on a vector\n\nusing namespace std;\n\nint min(const vector<int>& v, int);\nvoid selectionSort(vector<int>& v);\nvoid fillVec(vector<int>& v);\nvoid printVec(const vector<int>& v);\n\nint main() {\n    srand(time(0));\n\n    vector<int> test(10);\n\n    fillVec(test);\n    printVec(test);\n    selectionSort(test);\n    printVec(test);\n\n    return 0;\n}\n\n/* This function gets the position of the smallest element in the vector\n *\n * Accepts:\n *     const vector<int>& v - the vector to search\n *     int start            - the position to start looking for the smallest value\n * Returns:\n *     int - the position of the smallest element (-1 if there is no value)\n */\nint min(const vector<int>& v, int start) {\n    return -1;\n}\n\n/* Performs selection sort on the vector\n *\n * Accepts:\n *     vector<int>& v - the vector to sort\n * Returns:\n *     void\n */\nvoid selectionSort(vector<int>& v) {\n}\n\n/* Fills a vector with random values in [0, v.size()]\n * Accepts:\n *     vector<int>& v - the vector to fill with random data\n * Returns:\n *     void\n */\nvoid fillVec(vector<int>& v) {\n}\n\n/* Prints a vector to stdout\n *\n * Accepts:\n *     vector<int>& v - the vector to print\n * Returns:\n *     void\n */\nvoid printVec(const vector<int>& v) {\n}",
            "title": "Lab 1: Selection Sort Case Study"
        },
        {
            "location": "/lab01/#introduction",
            "text": "Selection sort is a naive sorting algorithm.  Given an unsorted vector of integers, find the position of the smallest element. \nSwap that element to index 0 of the vector. \nThen, find the smallest element in the index range  [1, v.size()-1] . \nSwap that element to index 1 of the vector. \nThen, find the smallest element in the index range  [2, v.size()-1] . \nSwap that element to index 2 of the vector. \nRepeat finding the smallest element and swapping into place until there are no more elements to sort.  This process guarantees a sorted vector at the end.\nIn the case described above, the vector will be in ascending order.",
            "title": "Introduction"
        },
        {
            "location": "/lab01/#starter-code",
            "text": "Take a look at the starter code below.  We will complete either  fillVec  or  printVec  together.  #include <iostream>\n#include <vector>\n#include <cstdlib>\n#include <ctime>\n\n// This is a program that will run a SELECTION SORT on a vector\n\nusing namespace std;\n\nint min(const vector<int>& v, int);\nvoid selectionSort(vector<int>& v);\nvoid fillVec(vector<int>& v);\nvoid printVec(const vector<int>& v);\n\nint main() {\n    srand(time(0));\n\n    vector<int> test(10);\n\n    fillVec(test);\n    printVec(test);\n    selectionSort(test);\n    printVec(test);\n\n    return 0;\n}\n\n/* This function gets the position of the smallest element in the vector\n *\n * Accepts:\n *     const vector<int>& v - the vector to search\n *     int start            - the position to start looking for the smallest value\n * Returns:\n *     int - the position of the smallest element (-1 if there is no value)\n */\nint min(const vector<int>& v, int start) {\n    return -1;\n}\n\n/* Performs selection sort on the vector\n *\n * Accepts:\n *     vector<int>& v - the vector to sort\n * Returns:\n *     void\n */\nvoid selectionSort(vector<int>& v) {\n}\n\n/* Fills a vector with random values in [0, v.size()]\n * Accepts:\n *     vector<int>& v - the vector to fill with random data\n * Returns:\n *     void\n */\nvoid fillVec(vector<int>& v) {\n}\n\n/* Prints a vector to stdout\n *\n * Accepts:\n *     vector<int>& v - the vector to print\n * Returns:\n *     void\n */\nvoid printVec(const vector<int>& v) {\n}",
            "title": "Starter Code"
        },
        {
            "location": "/lab02/",
            "text": "Exercise 1\n\n\nWrite a program that lists all of its arguments.\n\n\nExample:\n\n\n$ ./a.out hi there 2 3 4 20\nhi there 2 3 4 20\n$\n\n\n\n\nExercise 2\n\n\nWrite a program that takes each integer in a file and outputs it on new file on separate lines.\nYou should ask for the name of the input and output files from the user.\n\n\nDo \nnot\n allow the input and output filenames to be the same!\n\n\nBonus 1\n:\nIf the file contains non-integer terms, do not put them in the resulting file.\n\n\nBonus 2\n:\nAllow the user to pass in filenames via command line arguments.\nThe first argument should be the input file name.\nThe second should be the output file name.\n\n\nIf only one argument is passed in, assume it is the input file name and ask for the output file name.\n\n\nIf no arguments are passed in, ask for both the input and output file names.\n\n\n\n\n\nExercise 3\n\n\nGiven a file containing a list of pairs of integers in the following format:\n\n\n\n0 1\n 3 1\n 9 10\n 16 93\n 20 90\n 3 9\n\n\nwrite a program that outputs the sum of each pair of numbers on a newline in another file.\nThe file will only contain integers and will always be in the above format (hint, you can use\nthat to your advantage...)\nWrite your own sample file.\n\n\nBonus\n:\nIf the file contains non-integer terms, ignore them.",
            "title": "Lab Week 2: Streams"
        },
        {
            "location": "/lab02/#exercise-1",
            "text": "Write a program that lists all of its arguments.  Example:  $ ./a.out hi there 2 3 4 20\nhi there 2 3 4 20\n$",
            "title": "Exercise 1"
        },
        {
            "location": "/lab02/#exercise-2",
            "text": "Write a program that takes each integer in a file and outputs it on new file on separate lines.\nYou should ask for the name of the input and output files from the user.  Do  not  allow the input and output filenames to be the same!  Bonus 1 :\nIf the file contains non-integer terms, do not put them in the resulting file.  Bonus 2 :\nAllow the user to pass in filenames via command line arguments.\nThe first argument should be the input file name.\nThe second should be the output file name.  If only one argument is passed in, assume it is the input file name and ask for the output file name.  If no arguments are passed in, ask for both the input and output file names.",
            "title": "Exercise 2"
        },
        {
            "location": "/lab02/#exercise-3",
            "text": "Given a file containing a list of pairs of integers in the following format:  0 1\n 3 1\n 9 10\n 16 93\n 20 90\n 3 9  write a program that outputs the sum of each pair of numbers on a newline in another file.\nThe file will only contain integers and will always be in the above format (hint, you can use\nthat to your advantage...)\nWrite your own sample file.  Bonus :\nIf the file contains non-integer terms, ignore them.",
            "title": "Exercise 3"
        }
    ]
}